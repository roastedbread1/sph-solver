#version 460 core
layout(local_size_x = 128) in;

struct Particle {
    vec3 position;
    float density;
    vec3 velocity;
    float pressure;
    vec3 force;
    float padding;
    float nearDensity;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(std430, binding = 1) buffer MatrixBuffer {
    mat4 matrices[];
};

uniform float deltaTime;
uniform float boundaryDamping;
uniform vec3 bounds;
uniform float modelScale;

//mat4 calculateTransformMatrix(vec3 position) {
  //  return mat4(
    //    1.0, 0.0, 0.0, 0.0,
      //  0.0, 1.0, 0.0, 0.0,
        //0.0, 0.0, 1.0, 0.0,
        //position.x, position.y, position.z, 1.0
//    );
//}

mat4 calculateTransformMatrix(vec3 position) {
    return mat4(
        modelScale, 0.0, 0.0, 0.0,
        0.0, modelScale, 0.0, 0.0,
        0.0, 0.0, modelScale, 0.0,
        position.x, position.y, position.z, 1.0
    );
}

void main() {
    uint pIndex = gl_GlobalInvocationID.x;
    if(pIndex >= particles.length()) return;
    
    Particle particle = particles[pIndex];
    

    float safeDensity = max(particle.density, 1.0);
    vec3 acceleration = particle.force / safeDensity;
    

    particle.velocity += acceleration * deltaTime;
   // particle.velocity += acceleration * 1/120;
    float maxVel = 100.0; 
    if (length(particle.velocity) > maxVel) particle.velocity = normalize(particle.velocity) * maxVel;
    particle.position += particle.velocity * deltaTime;

   // particle.position += particle.velocity * 1/120;
    
    // used to be bounds / h but that was stupid
    vec3 scaledBounds = bounds ;

    if (length(particle.position) > 1000.0 || particle.position == vec3(0.0)) {
    particle.position = vec3(0.0, 0.5, 0.0); 
    particle.velocity = vec3(0.0);
}

    if(particle.position.y < 0.0) {
        particle.position.y = 0.0;
        if(particle.velocity.y < 0.0) {
            particle.velocity.y = -particle.velocity.y * boundaryDamping;
            particle.velocity.z = -particle.velocity.z * boundaryDamping;
            //ground friction
            particle.velocity.x *= 0.95;
            particle.velocity.z *= 0.95;
        }
    }
    
    
    if(particle.position.x < -scaledBounds.x ) {
        particle.position.x = -scaledBounds.x;
        if(particle.velocity.x < 0.0) {
            particle.velocity.x = -particle.velocity.x * boundaryDamping;
            //particle.velocity.z = -particle.velocity.z * boundaryDamping;
            
            particle.velocity.y *= 0.95;
            particle.velocity.z *= 0.95;
        }
    }
    if(particle.position.x > scaledBounds.x ) {
        particle.position.x = scaledBounds.x;
        if(particle.velocity.x > 0.0) {
            particle.velocity.x = -particle.velocity.x * boundaryDamping;
            //particle.velocity.z = -particle.velocity.z * boundaryDamping;

            particle.velocity.y *= 0.95;
            particle.velocity.z *= 0.95;
        }
    }
    
    
    if(particle.position.z < -scaledBounds.z) {
        particle.position.z = -scaledBounds.z;
        if(particle.velocity.z < 0.0) {
            particle.velocity.z = -particle.velocity.z * boundaryDamping;
            //particle.velocity.x = -particle.velocity.x * boundaryDamping;

            particle.velocity.x *= 0.95;
            particle.velocity.y *= 0.95;
        }
    }
    if(particle.position.z > scaledBounds.z) {
        particle.position.z = scaledBounds.z;
        if(particle.velocity.z > 0.0) {
            particle.velocity.z = -particle.velocity.z * boundaryDamping;
            //particle.velocity.x = -particle.velocity.x * boundaryDamping;


            particle.velocity.x *= 0.95;
            particle.velocity.y *= 0.95;
        }
    }
        if(particle.position.y > scaledBounds.y + 1.0) {
        particle.position.y = scaledBounds.y + 1.0;
        if(particle.velocity.y >= 0.0) {
            particle.velocity.y = -particle.velocity.y * boundaryDamping;
            //particle.velocity.z = -particle.velocity.z * boundaryDamping;


            particle.velocity.x *= 0.95;
            particle.velocity.z *= 0.95;
        }
    }
    

    particles[pIndex] = particle;
    

    matrices[pIndex] = calculateTransformMatrix(particle.position);
}