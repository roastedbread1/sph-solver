#version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct Particle
{
	vec4 position;
	vec4 velocity;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(std140, binding = 1) uniform Settings {
	float mass;
	float restDensity;
	float gasConst;
	float viscosity;
	float h;
	float g;
	float tension;
	int particleCubeWidth;
};

uint pcg(uint seed)
{
	uint state = seed * 747796405u + 2891336453u;
	uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
	 return (word >> 22u) ^ word;
}

float random(uint seed)
{
	return float(pcg(seed)) / 4294967295.0; // Divide by 2^32 - 1
}

void main()
{
	uvec3 id = gl_GlobalInvocationID;

	uint index = id.x + (id.y + particleCubeWidth * id.z) * particleCubeWidth;

	if (index >= particleCubeWidth * particleCubeWidth * particleCubeWidth)
	{
		return;
	}

	float particleSeparation = h + 0.01;


	float randX = (random(index * 3) * 0.5 - 1.0) * h/10.0;
    float randY = (random(index * 3 + 1) * 0.5 - 1.0) * h/10.0;
    float randZ = (random(index * 3 + 2) * 0.5 - 1.0) * h/10.0;


	vec3 position = vec3(
        id.x * particleSeparation + randX - 1.5,
        id.y * particleSeparation + randY + h + 0.1,
        id.z * particleSeparation + randZ - 1.5
    );


	particles[index].position = vec4(position, 1.0);
    particles[index].velocity = vec4(0.0, 0.0, 0.0, 0.0);

}